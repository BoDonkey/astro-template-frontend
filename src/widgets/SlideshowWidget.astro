---
const { widget } = Astro.props;

const {
  slideDuration = 5000,
  transitionSpeed = 300,
  autoplay = true,
  showControls = true,
  slides = []
} = widget;

// Generate unique ID for this slideshow instance
const slideshowId = `slideshow-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class='slideshow-container'
  data-autoplay={autoplay ? '' : null}
  data-slide-duration={slideDuration}
  data-slideshow-id={slideshowId}
>
  <div class='slides'>
    {
      slides.map((slide, index) => (
        <div
          class='slide'
          data-slide={index}
          data-active={index === 0 ? 'true' : 'false'}
          style={`transition: opacity ${transitionSpeed}ms ease-in-out;`}
        >
          <figure class='image is-16by9'>
            {slide._image?.[0] && (
              <img
                src={slide._image[0].attachment._urls['full']}
                alt={slide._image[0].attachment.alt || slide.slideTitle}
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            )}
          </figure>
          <div class='slide-content'>
            {slide.slideTitle && (
              <h3 class={`title is-4 has-text-${slide.titleColor || 'white'}`}>
                {slide.slideTitle}
              </h3>
            )}
            {slide.cardContent && (
              <div class={`content has-text-${slide.contentColor || 'white'}`}>
                {slide.cardContent}
              </div>
            )}
          </div>
        </div>
      ))
    }
  </div>

  {
    showControls && (
      <div class='slideshow-dots'>
        {slides.map((_, index) => (
          <button
            class='dot'
            data-index={index}
            data-active={index === 0 ? 'true' : 'false'}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    )
  }
</div>

<style>
  .slideshow-container {
    position: relative;
    overflow: hidden;
    width: 100%;
    aspect-ratio: 16/9;
  }

  .slides {
    position: relative;
    height: 100%;
    width: 100%;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .slide[data-active='true'] {
    opacity: 1;
    z-index: 1;
  }

  .image {
    height: 100%;
    margin: 0;
  }

  .image img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .slide-content {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 2rem;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
  }

  .slideshow-dots {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }

  .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    padding: 0;
    transition: background-color 0.3s ease;
  }

  .dot[data-active='true'] {
    background: white;
  }
</style>

<script>
import AposArea from "@apostrophecms/apostrophe-astro/components/AposArea.astro";
import AposEditLayout from "@apostrophecms/apostrophe-astro/components/layouts/AposEditLayout.astro";
import AposLayout from "@apostrophecms/apostrophe-astro/components/layouts/AposLayout.astro";
import AposRefreshLayout from "@apostrophecms/apostrophe-astro/components/layouts/AposRefreshLayout.astro";

  class Slideshow {
    constructor(container) {
      this.container = container;
      this.slideshowId = container.dataset.slideshowId;
      this.slides = [...container.querySelectorAll('.slide')];
      this.dots = [...container.querySelectorAll('.dot')];
      this.currentIndex = 0;
      this.autoplayInterval = null;

      this.init();
    }

    init() {
      if (this.slides.length === 0) return;

      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.showSlide(index));
      });

      if (this.container.hasAttribute('data-autoplay')) {
        this.startAutoplay();
      }
    }

    showSlide(index, currentIndex = this.currentIndex) {
      console.log('showSlide', index, this.slides[index], this.dots[index],this.slides[currentIndex], this.dots[currentIndex]);
      this.slides.forEach(slide => {
        slide.setAttribute('data-active', 'false');
        slide.classList.toggle('active');
      });
      this.dots.forEach(dot => {
        dot.setAttribute('data-active', 'false');
        dot.classList.toggle('active');
      });

      this.slides[index].setAttribute('data-active', 'true');
      if (this.dots[index]) {
        this.dots[index].setAttribute('data-active', 'true');
      }
      this.dots[index].style.color='green';

      this.currentIndex = index;

      if (this.container.hasAttribute('data-autoplay')) {
        this.stopAutoplay();
        this.startAutoplay();
      }
    }

    startAutoplay() {
      this.stopAutoplay();
      const duration = parseInt(this.container.dataset.slideDuration) || 5000;

      this.autoplayInterval = setInterval(() => {
        const nextIndex = (this.currentIndex + 1) % this.slides.length;
        this.showSlide(nextIndex);
      }, duration);
    }

    stopAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }

    destroy() {
      this.stopAutoplay();
      // Remove event listeners if needed
    }
  }

  // Store slideshow instances
  const slideshows = new Map();

  function initSlideshows() {
    // Clean up existing instances
    slideshows.forEach(slideshow => slideshow.destroy());
    slideshows.clear();

    // Initialize new instances with a slight delay to allow for apos widget wrapping
    setTimeout(() => {
      document.querySelectorAll('.slideshow-container').forEach(container => {
        console.log('container', container);
        const slideshowId = container.dataset.slideshowId;
        if (slideshowId && !apos.isEditing) {
          slideshows.set(slideshowId, new Slideshow(container));
        }
      });
    }, 500);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initSlideshows);

  // Handle ApostropheCMS refreshes
  if (window.apos) {
    apos.bus.$on('refreshed', initSlideshows);
  }
</script>