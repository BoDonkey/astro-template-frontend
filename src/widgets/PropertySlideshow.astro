---
//import { themes } from '../config/themes';

const { widget, theme = 'realEstate' } = Astro.props;
//const currentTheme = themes[theme];
---

<div class="property-slideshow">
  <div class="slider" data-autoplay={widget.autoplay} data-interval={widget.interval * 1000}>
    {widget.slides.map((slide, index) => (
      <div class={`slide ${index === 0 ? 'is-active' : ''}`}>
        <div class="slide-image">
          <img src={slide.image.url} alt={slide.title} />
          <div class={`overlay ${widget.overlayStyle}`}>
            <div class="slide-content">
              <h1 class={`title ${currentTheme.typography.headingSize} ${currentTheme.typography.headingWeight} has-text-white`}>
                {slide.title}
              </h1>
              {slide.subtitle && (
                <h2 class={`subtitle ${currentTheme.typography.subheadingSize} has-text-white`}>
                  {slide.subtitle}
                </h2>
              )}
              {slide.ctaText && slide.ctaLink && (
                <a href={slide.ctaLink} class={`button is-${currentTheme.colors.accent.color} is-medium`}>
                  {slide.ctaText}
                </a>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
    <div class="slider-navigation">
      <button class="prev">Previous</button>
      <button class="next">Next</button>
    </div>
    <div class="slider-indicators">
      {widget.slides.map((_, index) => (
        <button class={`indicator ${index === 0 ? 'is-active' : ''}`} data-slide={index}></button>
      ))}
    </div>
  </div>
</div>

<style>
  .property-slideshow {
    position: relative;
    height: 80vh;
    min-height: 500px;
    max-height: 800px;
  }

  .slide {
    display: none;
    height: 100%;
  }

  .slide.is-active {
    display: block;
  }

  .slide-image {
    position: relative;
    height: 100%;
  }

  .slide-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    padding: 2rem;
  }

  .overlay.gradient-dark {
    background: linear-gradient(to right, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 100%);
  }

  .overlay.gradient-light {
    background: linear-gradient(to right, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.5) 100%);
  }

  .slide-content {
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
  }

  .slider-navigation button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255,255,255,0.8);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
  }

  .slider-navigation .prev {
    left: 20px;
  }

  .slider-navigation .next {
    right: 20px;
  }

  .slider-indicators {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
  }

  .indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255,255,255,0.5);
    border: none;
    cursor: pointer;
  }

  .indicator.is-active {
    background: white;
  }
</style>

<script>
  // Client-side JavaScript for slideshow functionality
  document.addEventListener('DOMContentLoaded', () => {
    const slider = document.querySelector('.slider');
    if (!slider) return;

    const slides = slider.querySelectorAll('.slide');
    const indicators = slider.querySelectorAll('.indicator');
    const prevButton = slider.querySelector('.prev');
    const nextButton = slider.querySelector('.next');
    
    let currentSlide = 0;
    let interval = null;

    const showSlide = (index) => {
      slides.forEach(slide => slide.classList.remove('is-active'));
      indicators.forEach(indicator => indicator.classList.remove('is-active'));
      
      slides[index].classList.add('is-active');
      indicators[index].classList.add('is-active');
    };

    const nextSlide = () => {
      currentSlide = (currentSlide + 1) % slides.length;
      showSlide(currentSlide);
    };

    const prevSlide = () => {
      currentSlide = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(currentSlide);
    };

    // Set up autoplay
    if (slider.dataset.autoplay === 'true') {
      interval = setInterval(nextSlide, parseInt(slider.dataset.interval) || 5000);
    }

    // Event listeners
    prevButton?.addEventListener('click', () => {
      prevSlide();
      if (interval) {
        clearInterval(interval);
        interval = setInterval(nextSlide, parseInt(slider.dataset.interval) || 5000);
      }
    });

    nextButton?.addEventListener('click', () => {
      nextSlide();
      if (interval) {
        clearInterval(interval);
        interval = setInterval(nextSlide, parseInt(slider.dataset.interval) || 5000);
      }
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        currentSlide = index;
        showSlide(currentSlide);
        if (interval) {
          clearInterval(interval);
          interval = setInterval(nextSlide, parseInt(slider.dataset.interval) || 5000);
        }
      });
    });
  });
</script>