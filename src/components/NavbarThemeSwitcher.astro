---
---

<div class="navbar-item">
  <button class="theme-switcher button is-ghost p-2" aria-label="Toggle theme">
    <span class={`icon has-text-${Astro.props.iconColor || 'current'}`}>
      <i class="fa-solid fa-sun" aria-hidden="true"></i>
    </span>
  </button>
</div>

<script>
class ThemeSwitcher {
  constructor() {
    this.htmlElement = document.documentElement;
    this.init();
    this.setupSystemPreferenceListener();
  }

  init() {
    // Check system preference on initial load
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    // If no theme is set yet, use system preference
    if (!this.htmlElement.classList.contains('theme-dark') && 
        !this.htmlElement.classList.contains('theme-light')) {
      this.setTheme(prefersDark);
    }

    const buttons = document.querySelectorAll('.theme-switcher');
    buttons.forEach(button => {
      this.setupButton(button);
      this.updateIcon(button.querySelector('i'), this.isDarkTheme());
    });
  }

  setupSystemPreferenceListener() {
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', (e) => {
        this.setTheme(e.matches);
        document.querySelectorAll('.theme-switcher i').forEach(icon => {
          this.updateIcon(icon, e.matches);
        });
      });
  }

  setupButton(button) {
    button.addEventListener('click', () => this.toggleTheme(button));
  }

  toggleTheme(button) {
    const isDark = this.isDarkTheme();
    this.setTheme(!isDark);
    
    document.querySelectorAll('.theme-switcher i').forEach(icon => {
      this.updateIcon(icon, !isDark);
    });
  }

  isDarkTheme() {
    return this.htmlElement.classList.contains('theme-dark');
  }

  setTheme(isDark) {
    this.htmlElement.classList.remove(`theme-${isDark ? 'light' : 'dark'}`);
    this.htmlElement.classList.add(`theme-${isDark ? 'dark' : 'light'}`);
    
    // Optionally save preference to localStorage
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  }

  updateIcon(icon, isDark) {
    if (!icon) return;
    icon.classList.remove(isDark ? 'fa-sun' : 'fa-moon');
    icon.classList.add(isDark ? 'fa-moon' : 'fa-sun');
  }
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', () => {
  const themeSwitcher = new ThemeSwitcher();
});

// Support ApostropheCMS refresh
if (window.apos) {
  apos.bus.$on('refreshed', () => {
    const themeSwitcher = new ThemeSwitcher();
  });
}
</script>